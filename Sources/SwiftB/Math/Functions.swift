import Foundation
import Numerics

/**
 * Return ln(n!)
 * Natural logarithm from factorial of n.
 * For n<100 uses factorials table and direct logarithm calculation.
 * For n>=100 uses formula Gamma(n+1) = n!
 */
public func lnFuctorial<T: BinaryInteger>(_ n: T) -> Double {
    guard n > 0 else { return 0 }
    
    if n < factorialTbl.count {
        return log(factorialTbl[Int(n)])
    }
    
    return Double.logGamma(Double(n) + 1.0)
}

/**
 * Return ln(combination(n, k)) or ln(n choose k)
 */
public func lnCombination<T: BinaryInteger>(_ n: T, _ k: T) -> Double {
    guard n >= k else { return -1 }
    
    if n == k || k == 0 {
        return 0
    }
    
    if k == 1 {
        return log(Double(n))
    }
    
    let kk: T
    if 2*k > n {
        kk = n - k
    } else {
        kk = k
    }
    
    return lnFuctorial(n) - lnFuctorial(kk) - lnFuctorial(n - kk)
}

// MARK:- private
let factorialTbl = [
    1.0,
    1.0,
    2.0,
    6.0,
    24.0,
    120.0,
    720.0,
    5040.0,
    40320.0,
    
    362880.0,
    3628800.0,
    39916800.0,
    479001600.0,
    
    6227020800.0,
    87178291200.0,
    1307674368000.0,
    20922789888000.0,
    355687428096000.0,
    6402373705728000.0,
    121645100408832000.0,
    2432902008176640000.0,
    51090942171709440000.0,
    1124000727777607680000.0,
    25852016738884976640000.0,
    620448401733239439360000.0,
    15511210043330985984000000.0,
    403291461126605635584000000.0,
    10888869450418352160768000000.0,
    304888344611713860501504000000.0,
    8841761993739701954543616000000.0,
    265252859812191058636308480000000.0,
    8222838654177922817725562880000000.0,
    263130836933693530167218012160000000.0,
    8683317618811886495518194401280000000.0,
    
    2.95232799039604140847618609644e38,
    1.03331479663861449296666513375e40,
    3.71993326789901217467999448151e41,
    1.37637530912263450463159795816e43,
    5.23022617466601111760007224100e44,
    2.03978820811974433586402817399e46,
    8.15915283247897734345611269600e47,
    3.34525266131638071081700620534e49,
    1.40500611775287989854314260624e51,
    6.04152630633738356373551320685e52,
    2.65827157478844876804362581101e54,
    1.19622220865480194561963161496e56,
    5.50262215981208894985030542880e57,
    2.58623241511168180642964355154e59,
    1.24139155925360726708622890474e61,
    6.08281864034267560872252163321e62,
    3.04140932017133780436126081661e64,
    1.55111875328738228022424301647e66,
    8.06581751709438785716606368564e67,
    4.27488328406002556429801375339e69,
    2.30843697339241380472092742683e71,
    1.26964033536582759259651008476e73,
    7.10998587804863451854045647464e74,
    4.05269195048772167556806019054e76,
    2.35056133128287857182947491052e78,
    1.38683118545689835737939019720e80,
    8.32098711274139014427634118320e81,
    5.07580213877224798800856812177e83,
    3.14699732603879375256531223550e85,
    1.982608315404440064116146708360e87,
    1.268869321858841641034333893350e89,
    8.247650592082470666723170306800e90,
    5.443449390774430640037292402480e92,
    3.647111091818868528824985909660e94,
    2.480035542436830599600990418570e96,
    1.711224524281413113724683388810e98,
    1.197857166996989179607278372170e100,
    8.504785885678623175211676442400e101,
    6.123445837688608686152407038530e103,
    4.470115461512684340891257138130e105,
    3.307885441519386412259530282210e107,
    2.480914081139539809194647711660e109,
    1.885494701666050254987932260860e111,
    1.451830920282858696340707840860e113,
    1.132428117820629783145752115870e115,
    8.946182130782975286851441715400e116,
    7.156945704626380229481153372320e118,
    5.797126020747367985879734231580e120,
    4.753643337012841748421382069890e122,
    3.945523969720658651189747118010e124,
    3.314240134565353266999387579130e126,
    2.817104114380550276949479442260e128,
    2.422709538367273238176552320340e130,
    2.107757298379527717213600518700e132,
    1.854826422573984391147968456460e134,
    1.650795516090846108121691926250e136,
    1.485715964481761497309522733620e138,
    1.352001527678402962551665687590e140,
    1.243841405464130725547532432590e142,
    1.156772507081641574759205162310e144,
    1.087366156656743080273652852570e146,
    1.032997848823905926259970209940e148,
    9.916779348709496892095714015400e149,
    9.619275968248211985332842594960e151,
    9.426890448883247745626185743100e153,
    9.332621544394415268169923885600e155,
    9.33262154439441526816992388563e157
]
